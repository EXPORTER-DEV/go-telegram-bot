// Code generated by mockery v2.43.2. DO NOT EDIT.

package api

import (
	context "context"

	builder "github.com/EXPORTER-DEV/go-telegram-bot/pkg/bot/cmd/api/domain/builder"

	mock "github.com/stretchr/testify/mock"

	responses "github.com/EXPORTER-DEV/go-telegram-bot/pkg/bot/cmd/api/responses"
)

// MockRequester is an autogenerated mock type for the Requester type
type MockRequester struct {
	mock.Mock
}

type MockRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRequester) EXPECT() *MockRequester_Expecter {
	return &MockRequester_Expecter{mock: &_m.Mock}
}

// Poll provides a mock function with given fields: ctx
func (_m *MockRequester) Poll(ctx context.Context) chan *responses.Update {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 chan *responses.Update
	if rf, ok := ret.Get(0).(func(context.Context) chan *responses.Update); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *responses.Update)
		}
	}

	return r0
}

// MockRequester_Poll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Poll'
type MockRequester_Poll_Call struct {
	*mock.Call
}

// Poll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRequester_Expecter) Poll(ctx interface{}) *MockRequester_Poll_Call {
	return &MockRequester_Poll_Call{Call: _e.mock.On("Poll", ctx)}
}

func (_c *MockRequester_Poll_Call) Run(run func(ctx context.Context)) *MockRequester_Poll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRequester_Poll_Call) Return(_a0 chan *responses.Update) *MockRequester_Poll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequester_Poll_Call) RunAndReturn(run func(context.Context) chan *responses.Update) *MockRequester_Poll_Call {
	_c.Call.Return(run)
	return _c
}

// ReplyTo provides a mock function with given fields: ctx, target, text
func (_m *MockRequester) ReplyTo(ctx context.Context, target *responses.Update, text string) error {
	ret := _m.Called(ctx, target, text)

	if len(ret) == 0 {
		panic("no return value specified for ReplyTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *responses.Update, string) error); ok {
		r0 = rf(ctx, target, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequester_ReplyTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplyTo'
type MockRequester_ReplyTo_Call struct {
	*mock.Call
}

// ReplyTo is a helper method to define mock.On call
//   - ctx context.Context
//   - target *responses.Update
//   - text string
func (_e *MockRequester_Expecter) ReplyTo(ctx interface{}, target interface{}, text interface{}) *MockRequester_ReplyTo_Call {
	return &MockRequester_ReplyTo_Call{Call: _e.mock.On("ReplyTo", ctx, target, text)}
}

func (_c *MockRequester_ReplyTo_Call) Run(run func(ctx context.Context, target *responses.Update, text string)) *MockRequester_ReplyTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*responses.Update), args[2].(string))
	})
	return _c
}

func (_c *MockRequester_ReplyTo_Call) Return(_a0 error) *MockRequester_ReplyTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequester_ReplyTo_Call) RunAndReturn(run func(context.Context, *responses.Update, string) error) *MockRequester_ReplyTo_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: ctx, message
func (_m *MockRequester) SendMessage(ctx context.Context, message builder.MessageBuilder) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, builder.MessageBuilder) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRequester_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockRequester_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message builder.MessageBuilder
func (_e *MockRequester_Expecter) SendMessage(ctx interface{}, message interface{}) *MockRequester_SendMessage_Call {
	return &MockRequester_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, message)}
}

func (_c *MockRequester_SendMessage_Call) Run(run func(ctx context.Context, message builder.MessageBuilder)) *MockRequester_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(builder.MessageBuilder))
	})
	return _c
}

func (_c *MockRequester_SendMessage_Call) Return(_a0 error) *MockRequester_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRequester_SendMessage_Call) RunAndReturn(run func(context.Context, builder.MessageBuilder) error) *MockRequester_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SetDebugMode provides a mock function with given fields: debug
func (_m *MockRequester) SetDebugMode(debug bool) {
	_m.Called(debug)
}

// MockRequester_SetDebugMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDebugMode'
type MockRequester_SetDebugMode_Call struct {
	*mock.Call
}

// SetDebugMode is a helper method to define mock.On call
//   - debug bool
func (_e *MockRequester_Expecter) SetDebugMode(debug interface{}) *MockRequester_SetDebugMode_Call {
	return &MockRequester_SetDebugMode_Call{Call: _e.mock.On("SetDebugMode", debug)}
}

func (_c *MockRequester_SetDebugMode_Call) Run(run func(debug bool)) *MockRequester_SetDebugMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *MockRequester_SetDebugMode_Call) Return() *MockRequester_SetDebugMode_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRequester_SetDebugMode_Call) RunAndReturn(run func(bool)) *MockRequester_SetDebugMode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRequester creates a new instance of MockRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRequester {
	mock := &MockRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
